//Synchronization Commands

Errors which we need to handle are:
	ElementNotVisibleException
	NoSuchElementException
 	TimeOutError

		//Sleep - to force the browser to wait for a specific time even though the element is 
		available it will still wait till the given time
		Thread.sleep(5000);
		
		//PageLoad - it will allow the page to load till the specified time before throwing error
		driver.manage().timeouts().pageLoadTimeout(20, TimeUnit.SECONDS);
		
		//Implicit Wait - it will wait for the specified time before throwing error
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); 0-10
		
		//Explicit wait - the webDriver instance waits before locating webElements or performing actions on them
		WebDriverWait wait = new WebDriverWait(driver, 15);
		wait.until(ExpectedConditions.presenceOfElementLocated(ElementLocator));
	
			//elementToBeClickable() – The expected condition waits for an element to be clickable
			wait.until(ExpectedConditions.elementToBeClickable(By.xpath(“//div[contains(text(),’COMPOSE’)]”)));
	
			//textToBePresentInElement() – The expected condition waits for an element having a certain string pattern.
			wait.until(ExpectedConditions.textToBePresentInElement(By.xpath(“//div[@id= ‘forgotPass'”), “text to be found”));
	
			//alertIsPresent()- The expected condition waits for an alert box to appear.
			wait.until(ExpectedConditions.alertIsPresent()) !=null);

			//titleIs() – The expected condition waits for a page with a specific title.
			wait.until(ExpectedConditions.titleIs(“gmail”));			

	Fluent wait command - 
		//FluentWait can define the maximum amount of time to wait for a specific condition and frequency with which to check the condition before throwing an “ElementNotVisibleException” exception.
			To say in effortless manner, it tries to find the web element repeatedly at regular intervals of time until the timeout or till the object gets found.
			We use FluentWait commands mainly when we have web elements which sometimes visible in few seconds and some times take more time than usual. 
			Mainly in Ajax applications. 
			We could set the default pooling period based on our requirement. 
			We could ignore any exception while polling an element.

		FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver)
	       .withTimeout(30, TimeUnit.SECONDS)
	       .pollingEvery(5, TimeUnit.SECONDS)
	       .ignoring(NoSuchElementException.class);
			
			